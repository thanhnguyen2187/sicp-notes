(define (format-compiled-code inst-seq)
  (let ((needs (list-ref inst-seq 0))
        (modifies (list-ref inst-seq 1))
        (statements (list-ref inst-seq 2))
        (display-statement (lambda (statement)
                             (display "  ")
                             (display statement)
                             (newline)))
        (display-label (lambda (label)
                         (display label)
                         (newline))))
    (display "(")
    (display needs) (newline)
    (display " ") (display modifies) (newline)
    (display "(") (newline)
    (map (lambda (statement-or-label)
           (if (pair? statement-or-label)
             (display-statement statement-or-label)
             (display-label statement-or-label)))
         statements)
    (display "))")
    'ok))

'(format-compiled-code loaded)
