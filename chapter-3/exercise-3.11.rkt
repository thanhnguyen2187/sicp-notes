; Exercise 3.11
;
; In Section 3.2.3 we saw how the environment model described the behavior of
; procedures with local state. Now we have seen how internal definitions work. A
; typical message-passing procedure contains both of these aspects.
;
; Consider the bank acount procedure of Section 3.1.1:
;
; ...
;
; Show the environment structure generated by the sequence of interactions
;
; ...
;
; Where is the local state for `acc` kept? Suppose we define another account
;
; ...
;
; How are the local states for the two accounts kept distinct? Which parts of
; the environment structure are shared between `acc` and `acc2`?
;
; ---
;
; Environment structure generate:
;
; Global Environment:
; - acc:
;   balance
;   withdraw
;   deposit
;   dispatch
; - acc2:
;   balance
;   withdraw
;   deposit
;   dispatch
;
; Should we define `acc2`, the local states for the two accounts are kept
; distinct since `acc` and `acc2` create their own frames, with different
; `balance`s.
;
; `acc` and `acc2` shares... nothing, except the common names of global
; environment (`define`, `cond`, etc.).

#lang sicp

(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds!"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch message)
    (cond ((eq? message 'withdraw) withdraw)
          ((eq? message 'deposit) deposit)
          (else (error "Unknown request: MAKE-ACOUNT" message))))
  dispatch)

(define acc (make-account 50))
((acc 'deposit) 40)
((acc 'withdraw) 60)
